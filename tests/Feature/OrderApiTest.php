<?php

namespace Tests\Feature;

use App\DailyMenu;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Support\Facades\Artisan;

class OrderApiTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * This function is called before testcase
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate:refresh');
        Artisan::call('db:seed');
        Artisan::call('passport:install');
        \DB::table('oauth_clients')->where('id', 1)->update(['secret' => 'jz8I5A9FQhHVgUR8RfY0wNy42LatEPmDZNSgJhKf']);
        \DB::table('oauth_clients')->where('id', 2)->update(['secret' => 'Xw3fBXCJBI6Te6E7WR39n3hUz0WwmHGyCGqJMdZB']);
    }

    /**
     * A basic test create order api success.
     *
     * @return void
     */
    public function testCreateOrderSuccess()
    {
        $user= \App\User::find(1);
        $this->be($user, 'api');
        factory(DailyMenu::class, 1)->create(['food_id' => 45, 'quantity' => 10, 'date' => Carbon::now()->toDateString()]);
        factory(DailyMenu::class, 1)->create(['food_id' => 3, 'quantity' => 10,  'date' => Carbon::now()->toDateString()]);
        $data = [
            'user_id'=> 1,
	        'address_ship'=> '33 Trần Quý Cáp',
	        'trans_at'=> Carbon::now()->toDateString(),
	        'type'=> 'App\Food',
	        'items'=> [
                [
                    'id' => 45,
                    'quantity' => 4
                ],
                [
                    'id' => 3,
                    'quantity' => 1
                ]
	        ]
        ];
        $response = $this->json('POST', '/api/orders', $data);
        $response->assertJsonStructure([
            'data' => [
                'order_id', 'user_id', 'address_ship', 'total_price'
            ],
            'success'
        ])->assertStatus(200);
        $data = json_decode($response->getContent());
        $arrayCompare = [
            'id' => $data->data->order_id,
            'user_id' => $data->data->user_id,
            'custom_address' => $data->data->address_ship,
            'total_price' => $data->data->total_price
        ];
        $this->assertDatabaseHas('orders', $arrayCompare);
    }

    public function listCaseTestValidationForCreateOrder()
    {
        return [
            [
                [
                    'user_id'=> '',
                    'address_ship'=> '33 Trần Quý Cáp',
                    'trans_at'=> '2017-09-12 11:11:00',
                    'type'=> 'App\Food',
                    'items'=> [
                        [
                            'id' => 45,
                            'quantity' => 4
                        ],
                        [
                            'id' => 3,
                            'quantity' => 1
                        ]
                    ]
                ],
                [
                    'user_id' => ['The user id field is required.']
                ]
            ],
            [
                [
                    'user_id'=> 1,
                    'address_ship'=> '',
                    'trans_at'=> '2017-09-12 11:11:00',
                    'type'=> 'App\Food',
                    'items'=> [
                        [
                            'id' => 45,
                            'quantity' => 4
                        ],
                        [
                            'id' => 3,
                            'quantity' => 1
                        ]
                    ]
                ],
                [
                    'address_ship' => ['The address ship field is required.']
                ]
            ],
            [
                [
                    'user_id'=> 1,
                    'address_ship'=> '33 Trần Quý Cáp',
                    'trans_at'=> '',
                    'type'=> 'App\Food',
                    'items'=> [
                        [
                            'id' => 45,
                            'quantity' => 4
                        ],
                        [
                            'id' => 3,
                            'quantity' => 1
                        ]
                    ]
                ],
                [
                    'trans_at' => ['The trans at field is required.']
                ]
            ],
            [
                [
                    'user_id'=> 1,
                    'address_ship'=> '33 Trần Quý Cáp',
                    'trans_at'=> '2017-09-12 11:11:00',
                    'type'=> '',
                    'items'=> [
                        [
                            'id' => 45,
                            'quantity' => 4
                        ],
                        [
                            'id' => 3,
                            'quantity' => 1
                        ]
                    ]
                ],
                [
                    'type' => ['The type field is required.']
                ]
            ],
            [
                [
                    'user_id'=> 1,
                    'address_ship'=> '33 Trần Quý Cáp',
                    'trans_at'=> '2017-09-12 11:11:00',
                    'type'=> '',
                    'items'=> ''
                ],
                [
                    'items' => ['The items field is required.']
                ]
            ]
        ];
    }

    /**
     * A basic test create order api valid validation.
     * @dataProvider listCaseTestValidationForCreateOrder
     *
     * @return void
     */
    public function testValidationCreateOrder($data, $expected)
    {
        $user= \App\User::find(1);
        $this->be($user, 'api');
        $response = $this->json('POST', '/api/orders', $data);
        $response->assertJson($expected)->assertStatus(422);
    }

    /**
     * A basic test create order api fail quantity.
     *
     * @return void
     */
    public function testCreateOrderFailQuantity()
    {
        $user= \App\User::find(1);
        $this->be($user, 'api');
        factory(DailyMenu::class, 1)->create(['food_id' => 45, 'quantity' => 3, 'date' => Carbon::now()->toDateString()]);
        factory(DailyMenu::class, 1)->create(['food_id' => 3, 'quantity' => 1,  'date' => Carbon::now()->toDateString()]);
        $data = [
            'user_id'=> 1,
            'address_ship'=> '33 Trần Quý Cáp',
            'trans_at'=> Carbon::now()->toDateString(),
            'type'=> 'App\Food',
            'items'=> [
                [
                    'id' => 45,
                    'quantity' => 4
                ],
                [
                    'id' => 3,
                    'quantity' => 1
                ]
            ]
        ];
        $response = $this->json('POST', '/api/orders', $data);
        $response->assertJsonStructure([
            'message'
        ])->assertSee('SQLSTATE')->assertStatus(404);
    }
}
